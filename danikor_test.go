package danikor

import (
	"encoding/hex"
	"fmt"
	"net"
	"strings"
	"testing"
	"time"
)

func sendHexString(conn net.Conn, hexStr string) error {
	rspData, err := hex.DecodeString(strings.ReplaceAll(hexStr, " ", ""))
	if _, err = conn.Write(rspData); err != nil {
		fmt.Println(err)
		return err
	} else {
		return nil
	}
}

func TestDanikorTCPConnection_Dial(t *testing.T) {
	// 创建一个测试用的 TCP Server
	listener, err := net.Listen("tcp", "localhost:0")
	if err != nil {
		t.Fatalf("Failed to create listener: %v", err)
	}
	defer listener.Close()

	// 启动一个goroutine来接受连接
	go func() {
		for {
			conn, err := listener.Accept()
			if err != nil {
				t.Errorf("Failed to accept connection: %v", err)
				return
			}

			recData := make([]byte, 1024)
			for {
				n, err := conn.Read(recData)
				if err != nil {
					fmt.Println("Error receiving recData:", err)
					return
				}
				fmt.Println(hex.EncodeToString(recData[:n]))
				switch hex.EncodeToString(recData[:n]) {
				case "0200000005523030303103", "0200000005523032303303":
					fmt.Println("mid 001 建立通信数据包, or mid 0203 订阅实时曲线数据")
					rspDataStr := "0200000008413030303141434b03"
					if err = sendHexString(conn, rspDataStr); err != nil {
						return
					}
				case "020000000a573033303130313d313b03":
					fmt.Println("mid 正转")
					d_0 := "0200000008413033303141434b03"
					d_1 := "02000000395430323033303130313d352c303b303130323d313b303230313d303b303230323d313b303330313d302e3030303b303330323d302e3030303b03"
					d_2 := "02000001665430323033303130313d352c303b303130323d313b303230313d303b303230323d303b303330313d302e3030372c302e3030372c302e3030372c302e3031302c302e3030392c302e3030392c302e3031302c302e3031332c302e3031302c302e3030372c302e3030372c302e3030372c302e3030392c302e3030362c302e3030312c302e3030322c302e3030322c302e3030332c302e3030332c302e3030312c302e3030322c302e3030352c302e3030352c302e3030362c302e3030353b303330323d302e3030302c302e3030302c302e3030302c312e3134362c312e3731392c322e3836352c342e3031312c342e3031312c352e3733302c362e3837352c382e3539342c392e3734302c31312e3435392c31312e3435392c31322e3630352c31332e3137382c31342e3332342c31352e3437302c31362e3034332c31362e3034332c31362e3631362c31372e3736322c31382e3333352c31382e3930382c32302e3035343b03"
					d_3 := "02000001725430323033303130313d352c303b303130323d313b303230313d303b303230323d303b303330313d302e3030302c302e3030332c302e3030342c302e3030302c302e3030312c302e3030312c302e3030332c302e3030342c302e3030312c302e3030312c302e3030342c302e3030342c302e3030362c302e3030332c302e3030332c302e3030342c302e3030362c302e3030362c302e3030342c302e3030322c302e3030342c302e3030362c302e3030352c302e3030352c302e3030333b303330323d34312e3235332c34332e3534352c34342e3131382c34352e3236342c34362e3431302c34372e3535352c34382e3132382c34382e3132382c34392e3237342c34392e3834372c35302e3939332c35322e3133392c35322e3731322c35322e3731322c35332e3835382c35352e3030342c35362e3135302c35372e3239362c35372e3836392c35372e3836392c35392e3031352c36302e3136312c36312e3330362c36322e3435322c36332e3032353b03"
					d_5 := "02000001795430323033303130313d352c303b303130323d313b303230313d303b303230323d303b303330313d302e3030332c302e3030342c302e3030342c302e3030322c302e3030332c302e3030362c302e3030352c302e3030322c302e3030322c302e3030332c302e3030352c302e3030352c302e3030322c302e3030322c302e3030322c302e3030342c302e3030362c302e3030322c302e3030332c302e3030352c302e3030352c302e3030372c302e3030352c302e3030342c302e3030363b303330323d38342e3232352c38362e3531372c38372e3039302c38382e3233352c38382e3233352c38392e3338312c39302e3532372c39312e3130302c39322e3234362c39332e3339322c39332e3339322c39342e3533382c39352e3638342c39362e3235372c39372e3430332c39382e3534392c39382e3534392c39392e3639352c3130302e3236382c3130312e3431342c3130312e3938362c3130332e3133322c3130332e3133322c3130332e3730352c3130342e3835313b03"
					d_6 := "020000018b5430323033303130313d352c303b303130323d313b303230313d303b303230323d303b303330313d302e3030362c302e3030372c302e3030342c302e3030352c302e3030352c302e3030372c302e3030362c302e3030332c302e3030342c302e3030362c302e3030362c302e3030352c302e3030322c302e3030332c302e3030342c302e3030352c302e3030352c302e3030322c302e3030312c302e3030332c302e3030342c302e3030312c302e3030312c302e3030312c302e3030333b303330323d3130342e3835312c3130372e3134332c3130382e3238392c3130382e3836322c3131302e3030382c3131312e3135342c3131312e3135342c3131322e3330302c3131332e3434362c3131342e3539322c3131352e3733372c3131362e3838332c3131362e3838332c3131372e3435362c3131382e3630322c3131392e3734382c3132302e3839342c3132322e3034302c3132322e3034302c3132332e3138362c3132332e3735392c3132342e3930352c3132362e3035312c3132362e3632342c3132362e3632343b03"
					d_7 := "020000018b5430323033303130313d352c303b303130323d313b303230313d303b303230323d303b303330313d302e3030332c302e3030322c302e3030322c302e3030332c302e3030352c302e3030352c302e3030332c302e3030312c302e3030322c302e3030342c302e3030322c302e3030322c302e3030302c302e3030302c302e3030332c302e3030332c302e3030312c302e3030312c302e3030332c302e3030352c302e3030362c302e3030342c302e3030342c302e3030342c302e3030363b303330323d3132372e3737302c3132382e3931352c3132392e3438382c3133302e3633342c3133312e3738302c3133322e3932362c3133342e3037322c3133342e3037322c3133352e3231382c3133362e3336342c3133372e3531302c3133382e3038332c3133392e3232392c3133392e3232392c3134302e3337352c3134302e3934382c3134322e3039342c3134322e3636362c3134332e3831322c3134332e3831322c3134342e3338352c3134352e3533312c3134362e3130342c3134372e3235302c3134382e3339363b03"
					d_47 := "02000001925430323033303130313d352c303b303130323d313b303230313d303b303230323d303b303330313d302e3030352c302e3030322c302e3030322c302e3030342c302e3030362c302e3030332c302e3030312c302e3030322c302e3030322c302e3030342c302e3030322c302e3030302c302e3030312c302e3030342c302e3030342c302e3030332c302e3030312c302e3030322c302e3030342c302e3030352c302e3030352c302e3030322c302e3030332c302e3030352c302e3030363b303330323d3938342e3334312c3938362e3036302c3938372e3230362c3938382e3335322c3938382e3335322c3938392e3439382c3939302e3634342c3939312e3739302c3939322e3933362c3939342e3038322c3939342e3038322c3939352e3232382c3939352e3830312c3939362e3934362c3939382e3039322c3939382e3636352c3939382e3636352c3939392e3831312c313030302e3338342c313030312e3533302c313030322e3637362c313030332e3234392c313030332e3234392c313030342e3339352c313030352e3534313b03"
					d_59 := "020000010e5430323033303130313d352c303b303130323d313b303230313d313b303230323d303b303330313d302e3030322c302e3030332c302e3030312c302e3030312c302e3030322c302e3030332c302e3030322c302e3030302c302e3030312c302e3030312c302e3030332c302e3030332c302e3030302c302e3030312c302e3030313b303330323d313234332e3839312c313234362e3138332c313234362e3735362c313234372e3930322c313234392e3034382c313234392e3034382c313235302e3139342c313235302e3736372c313235312e3931332c313235332e3035392c313235342e3230342c313235342e3230342c313235342e3737372c313235352e3932332c313235372e3036393b03"

					m_0 := "020000010e5430323033303130313d352c303b303130323d313b303230313d313b303230323d303b303330313d302e3030322c302e3030332c302e3030312c302e3030312c302e3030322c302e3030332c302e3030322c302e3030302c302e3030312c302e3030312c302e3030332c302e3030332c302e3030302c302e3030312c302e3030313b303330323d313234332e3839312c313234362e3138332c313234362e3735362c313234372e3930322c313234392e3034382c313234392e3034382c313235302e3139342c313235302e3736372c313235312e3931332c313235332e3035392c313235342e3230342c313235342e3230342c313235342e3737372c313235352e3932332c313235372e3036393b03"
					m_1 := "02000001725430323033303130313d352c303b303130323d313b303230313d303b303230323d303b303330313d302e3030362c302e3030322c302e3030342c302e3030312c302e3030312c302e3030312c302e3030302c302e3030302c302e3030322c302e3030322c302e3030342c302e3030302c302e3030302c302e3030302c302e3030312c302e3030302c302e3030322c302e3030342c302e3030322c302e3030322c302e3030302c302e3030322c302e3030312c302e3030312c302e3030323b303330323d32352e3231302c32362e3335362c32392e3739342c33302e3934302c33312e3531332c33312e3531332c33342e3935302c33352e3532332c33362e3636392c33372e3831352c33382e3936312c33382e3936312c33392e3533342c34302e3638302c34332e3534352c34332e3534352c34342e3639312c34352e3833372c34362e3938332c34372e3535352c34382e3730312c34382e3730312c35312e3536362c35322e3731322c35332e3835383b03"
					m_3 := "020000017b5430323033303130313d352c303b303130323d313b303230313d303b303230323d303b303330313d302e3030322c302e3030312c302e3030322c302e3030322c302e3030352c302e3030352c302e3030362c302e3030332c302e3030332c302e3030362c302e3030322c302e3030342c302e3030322c302e3030322c302e3030312c302e3030322c302e3030352c302e3030342c302e3030362c302e3030362c302e3030352c302e3030332c302e3030342c302e3030362c302e3030363b303330323d38302e3231342c38312e3933332c38342e3739382c38352e3337312c38362e3531372c38372e3636332c38382e3830382c38382e3830382c38392e3935342c39322e3234362c39352e3131312c39362e3235372c39372e3430332c39372e3937362c39392e3132322c39392e3132322c3130302e3236382c3130332e3133322c3130332e3730352c3130342e3835312c3130352e3939372c3130362e3537302c3130362e3537302c3130372e3731362c3130382e3836323b03"
					m_4 := "020000017b5430323033303130313d352c303b303130323d313b303230313d303b303230323d303b303330313d302e3030322c302e3030312c302e3030322c302e3030322c302e3030352c302e3030352c302e3030362c302e3030332c302e3030332c302e3030362c302e3030322c302e3030342c302e3030322c302e3030322c302e3030312c302e3030322c302e3030352c302e3030342c302e3030362c302e3030362c302e3030352c302e3030332c302e3030342c302e3030362c302e3030363b303330323d38302e3231342c38312e3933332c38342e3739382c38352e3337312c38362e3531372c38372e3636332c38382e3830382c38382e3830382c38392e3935342c39322e3234362c39352e3131312c39362e3235372c39372e3430332c39372e3937362c39392e3132322c39392e3132322c3130302e3236382c3130332e3133322c3130332e3730352c3130342e3835312c3130352e3939372c3130362e3537302c3130362e3537302c3130372e3731362c3130382e3836323b03"
					m_5 := "02000001a15430323033303130313d352c303b303130323d313b303230313d303b303230323d303b303330313d302e3030352c302e3030312c302e3030322c302e3030342c302e3030312c302e3030332c302e3030352c302e3030362c302e3030332c302e3030332c302e3030342c302e3030352c302e3030342c302e3030342c302e3030362c302e3030372c302e3030342c302e3030332c302e3030332c302e3030332c302e3030322c302e3030322c302e3030342c302e3030342c302e3030333b303330323d3939352e3232382c3939362e3337342c3939362e3934362c313030302e3338342c313030302e3935372c313030302e3935372c313030322e3130332c313030332e3234392c313030332e3832322c313030342e3936382c313030342e3936382c313030372e3833332c313030382e3937392c313030392e3535322c313031312e3237302c313031312e3237302c313031312e3834332c313031322e3938392c313031342e3133352c313031362e3432372c313031372e3537332c313031382e3731392c313031392e3239322c313032302e3433382c313032312e3538343b03"
					m_6 := "02000001a45430323033303130313d352c303b303130323d313b303230313d303b303230323d303b303330313d302e3030332c302e3030312c302e3030302c302e3030312c302e3030332c302e3030332c302e3030342c302e3030302c302e3030312c302e3030312c302e3030312c302e3030302c302e3030322c302e3030332c302e3030302c302e3030302c302e3030312c302e3030302c302e3030302c302e3030302c302e3030332c302e3030352c302e3030342c302e3030332c302e3030343b303330323d313032312e3538342c313032322e3733302c313032352e3539342c313032362e3734302c313032372e3331332c313032382e3435392c313032392e3630352c313032392e3630352c313033302e3137382c313033312e3332342c313033342e3736322c313033342e3736322c313033352e3930382c313033372e3035342c313033382e3139392c313033392e3334352c313033392e3931382c313033392e3931382c313034322e3738332c313034332e3335362c313034342e3530322c313034342e3530322c313034352e3037352c313034362e3232312c313034362e3739343b03"
					m_7 := "02000000965430323033303130313d352c303b303130323d313b303230313d313b303230323d303b303330313d302e3030352c302e3030342c302e3030362c302e3030342c302e3030312c302e3030322c302e3030313b303330323d313234372e3930322c313235302e3139342c313235312e3334302c313235312e3334302c313235322e3438362c313235332e3035392c313235362e3439363b03"

					sendHexString(conn, d_0)
					time.Sleep(time.Millisecond * 200)
					sendHexString(conn, d_1)
					time.Sleep(time.Millisecond * 200)
					sendHexString(conn, d_2)
					time.Sleep(time.Millisecond * 200)
					sendHexString(conn, d_3)
					time.Sleep(time.Millisecond * 200)
					sendHexString(conn, d_5)
					time.Sleep(time.Millisecond * 200)
					sendHexString(conn, d_6)
					time.Sleep(time.Millisecond * 200)
					sendHexString(conn, d_7)
					time.Sleep(time.Millisecond * 200)
					sendHexString(conn, d_47)
					time.Sleep(time.Millisecond * 200)
					sendHexString(conn, d_59)
					time.Sleep(time.Millisecond * 200)

					time.Sleep(time.Second * 5)
					sendHexString(conn, m_0)
					time.Sleep(time.Millisecond * 200)
					sendHexString(conn, m_1)
					time.Sleep(time.Millisecond * 200)
					sendHexString(conn, m_3)
					time.Sleep(time.Millisecond * 200)
					sendHexString(conn, m_4)
					time.Sleep(time.Millisecond * 200)
					sendHexString(conn, m_5)
					time.Sleep(time.Millisecond * 200)
					sendHexString(conn, m_6)
					time.Sleep(time.Millisecond * 200)
					sendHexString(conn, m_7)
					time.Sleep(time.Millisecond * 200)
				}
			}

			t.Log("close")
			conn.Close()
			return
		}
	}()

	// 创建一个 DanikorTCPConnection 实例
	dc := &DanikorTCPConnection{
		address: listener.Addr().String(),
		receiveCallBack: func(ansData AnsData) {
			fmt.Println("ansData:", ansData)
		},
	}

	// 验证连接是否成功建立
	if dc.conn == nil {
		t.Error("Failed to establish connection")
	}

	// 测试 Dial() 方法
	dc.Dial()
	dc.Establish()
	dc.SubscribeRealTimeData()
	dc.ForwardTurn()
	dc.StartReceiveData()
}
